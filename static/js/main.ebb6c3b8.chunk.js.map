{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","boy","setBoy","girl","setGirl","isred","className","onChange","evt","target","value","onClick","preventDefault","boy1","girl1","l","length","x","z","search","substr","console","log","style","fontSize","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gKAoGeA,MA/Ff,WAAgB,IAAD,EACMC,mBAAS,IADf,mBACNC,EADM,KACFC,EADE,OAEQF,mBAAS,IAFjB,mBAENG,EAFM,KAEDC,EAFC,OAyBUJ,oBAAS,GAzBnB,mBAyBNK,EAzBM,KAyDb,OAzDa,KA0DX,yBAAKC,UAAU,iBACb,6BAAK,6BACL,wBAAIA,UAAU,eAAd,UACA,6BAAK,6BACL,0BAAMA,UAAU,QACd,gCACA,yBAAKA,UAAU,oCAEhB,0BAAMA,UAAU,wBAAuB,qCACpC,2BAAOA,UAAU,qBAAqBC,SAzC9C,SAAmBC,GACjBN,EAAOM,EAAIC,OAAOC,UAyCZ,0BAAMJ,UAAU,uBAAsB,sCACtC,2BAAOA,UAAU,qBAAqBC,SAxC7C,SAAoBC,GACnBJ,EAAQI,EAAIC,OAAOC,WAyCf,6BAAK,6BAEL,4BAAQJ,UAAU,iCAAiCK,QAzCxD,SAAgBH,GACfA,EAAII,iBACJ,IAAIC,EAAKZ,EACLa,EAAMX,EACNY,EAAEF,EAAKG,OACX,IAAI,IAAIC,KAAKJ,EAAK,CAEhB,IAAMK,EAAEJ,EAAMK,OAAON,EAAKI,KAClB,IAALC,IACFH,IAEAD,EAAMA,EAAMM,OAAO,EAAEF,GAAG,GAAGJ,EAAMM,OAAOF,EAAE,IAM7CH,GAAID,EAAME,OACZK,QAAQC,IAAIP,KAuBN,YAIF,6BAAK,6BACL,4BAAQQ,MAAO,CAACC,SAAS,MACzB,yBAAKlB,UAAU,iBAEhB,0BAAMA,UAAU,SAASiB,MAAOlB,EA7EtB,CACXoB,gBAAgB,OAiBL,CACXA,gBAAgB,UA0Df,KACA,0BAAMnB,UAAU,SAASiB,MA3Ef,CACXE,gBAAgB,WA0Ef,KACA,0BAAMnB,UAAU,SAASiB,MAzEf,CACXE,gBAAgB,WAwEf,KACA,0BAAMnB,UAAU,SAASiB,MAvEf,CACXE,gBAAgB,UAsEf,KACA,0BAAMnB,UAAU,SAASiB,MArEf,CACXE,gBAAgB,SAoEf,KACA,0BAAMnB,UAAU,SAASiB,MAnEf,CACXE,gBAAgB,WAkEf,SC/EeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.ebb6c3b8.chunk.js","sourcesContent":["import React,{useState} from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nfunction App() {\n  const [boy,setBoy]=useState(\"\");\n  const [girl,setGirl]=useState(\"\");\n\n  const stylef={\n    backgroundColor:\"red\"\n  }\n  const stylel={\n    backgroundColor:\"orange\"\n  }\n  const stylea={\n    backgroundColor:\"yellow\"\n  }\n  const stylem={\n    backgroundColor:\"green\"\n  }\n  const stylee={\n    backgroundColor:\"blue\"\n  }\n  const styles={\n    backgroundColor:\"indigo\"\n  }\n  const stylew={\n    backgroundColor:\"white\"\n  }\n  const [isred,setIsred]=useState(true);\n  function handleBoy(evt){\n    setBoy(evt.target.value);\n   }\n   function handleGirl(evt){\n    setGirl(evt.target.value);\n   }\n   function submit(evt){\n    evt.preventDefault();\n    var boy1=boy;\n    var girl1=girl;\n    var l=boy1.length\n    for(let x in boy1){\n      //console.log(boy1[x])\n      const z=girl1.search(boy1[x])\n      if(z!==-1)\n      {l--;\n        //boy1=boy1.substr(0,x)+\"\"+boy1.substr(x+1);\n       girl1=girl1.substr(0,z)+\"\"+girl1.substr(z+1);\n      }\n      \n      //console.log(boy1,\" \",girl1)\n      //console.log(len+girl1.length)\n    }\n    l=l+girl1.length\n  console.log(l)\n  \n    \n  \n  //console.log(boy,girl)\n  }\n\n  return (\n    <div className=\"container col\">\n      <br/><br/>\n      <h1 className=\"text-center\">FLAMES</h1>\n      <br/><br/>\n      <form className=\"form\">\n        <center>\n        <div className=\"container form-contol row center\">\n       \n       <span className=\"form-control  col-1 \"><h5 >Boy:</h5></span>\n          <input className=\"form-control col-5\" onChange={handleBoy}/>\n          <span className=\"form-control col-1 \"><h5>Girl:</h5></span>\n          <input className=\"form-control col-5\" onChange={handleGirl}/>\n        </div>\n        <br/><br/>\n         \n        <button className=\"btn-success form-control col-3\" onClick={submit}>Submit</button>\n        </center>\n\n      </form>\n      <br/><br/>\n      <center style={{fontSize:130}} >\n      <div className=\"container row\">\n      \n     <span className=\" col-2\" style={isred?stylef:stylew}>F</span>\n     <span className=\" col-2\" style={stylel}>L</span>\n     <span className=\" col-2\" style={stylea}>A</span>\n     <span className=\" col-2\" style={stylem}>M</span>\n     <span className=\" col-2\" style={stylee}>E</span>\n     <span className=\" col-2\" style={styles}>S</span>\n     \n     </div>\n     \n     </center>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}